# -*- coding: utf-8 -*-
class Calculator::RussianPost < Calculator

  ##########################################
  # Калькулятор стоимости доставки Почтой России
  ##########################################
  # 1) почтовый тариф (зависит от веса и расстояния, т.е. зоны)
  # 2) страховой сбор (обычно 4% от суммы оценки посылки)
  # 3) упаковка посылки 


  ##########################################
  # Инструкция для актуализации баз индексов
  ##########################################
  # 1) Скачать последнюю базу данных индексов и зон
  #    http://info.russianpost.ru/database/tzones.html
  #    Сейчас используется база от 05.07.2010 г.
  # 2) Используя, например, программу dbview экспортировать базу:
  #    dbview RZMsk11.DBF > indexes.txt
  # 3) Пользуясь простым скриптом получить массив INDEX_ZONE_HASH
  #    puts Hash[*File.read('indexes.txt').scan(/^Index      : (\d\d\d)\d\d\d\nRatezone   : (\d+)$/).flatten].indpect
  

  VES_TOVARA_PO_UMOLCHANIYU = 400  # Assume gramms
  STRAHOVOY_SBOR = 4 # percents
  VES_UPAKOVKI = 10 # percents from total_weight
  INDEX_ZONE_HASH = {"303"=>"1", "410"=>"2", "115"=>"1", "141"=>"1", "142"=>"1", "305"=>"1", "412"=>"2", "600"=>"1", "117"=>"1", "143"=>"1", "306"=>"1", "413"=>"2", "601"=>"1", "144"=>"1", "170"=>"1", "307"=>"1", "414"=>"2", "440"=>"2", "602"=>"1", "119"=>"1", "171"=>"1", "308"=>"2", "360"=>"2", "603"=>"1", "172"=>"1", "361"=>"2", "416"=>"2", "442"=>"2", "630"=>"3", "173"=>"2", "309"=>"2", "362"=>"2", "443"=>"2", "174"=>"2", "901"=>"1", "363"=>"2", "606"=>"1", "632"=>"3", "175"=>"2", "364"=>"2", "390"=>"1", "445"=>"2", "607"=>"1", "633"=>"3", "391"=>"1", "446"=>"2", "634"=>"3", "660"=>"3", "392"=>"1", "366"=>"2", "636"=>"3", "662"=>"3", "367"=>"3", "393"=>"1", "663"=>"3", "368"=>"3", "394"=>"1", "690"=>"5", "664"=>"4", "369"=>"2", "665"=>"4", "396"=>"1", "692"=>"5", "666"=>"4", "397"=>"1", "693"=>"5", "101"=>"1", "667"=>"3", "398"=>"1", "694"=>"5", "102"=>"1", "668"=>"3", "399"=>"1", "103"=>"1", "669"=>"4", "104"=>"1", "130"=>"1", "105"=>"1", "131"=>"1", "400"=>"2", "106"=>"1", "132"=>"1", "107"=>"1", "214"=>"1", "108"=>"1", "160"=>"1", "215"=>"1", "241"=>"1", "403"=>"2", "109"=>"1", "135"=>"1", "161"=>"1", "216"=>"1", "242"=>"1", "404"=>"2", "430"=>"2", "162"=>"1", "243"=>"1", "350"=>"2", "431"=>"2", "163"=>"2", "432"=>"2", "620"=>"2", "164"=>"2", "190"=>"2", "352"=>"2", "433"=>"2", "165"=>"2", "191"=>"2", "353"=>"2", "460"=>"2", "622"=>"2", "166"=>"2", "192"=>"2", "354"=>"2", "461"=>"2", "623"=>"2", "167"=>"2", "193"=>"2", "248"=>"1", "355"=>"2", "462"=>"2", "624"=>"2", "650"=>"3", "194"=>"2", "249"=>"1", "356"=>"2", "625"=>"3", "168"=>"2", "195"=>"2", "357"=>"2", "626"=>"3", "652"=>"3", "169"=>"2", "358"=>"2", "627"=>"3", "653"=>"3", "196"=>"2", "359"=>"2", "385"=>"2", "628"=>"3", "654"=>"3", "680"=>"5", "197"=>"2", "681"=>"5", "386"=>"2", "629"=>"3", "655"=>"3", "198"=>"2", "682"=>"5", "468"=>"5", "656"=>"3", "199"=>"2", "683"=>"5", "684"=>"5", "658"=>"3", "685"=>"5", "659"=>"3", "200"=>"2", "686"=>"5", "687"=>"4", "121"=>"1", "688"=>"5", "689"=>"5", "123"=>"1", "500"=>"0", "124"=>"1", "150"=>"1", "125"=>"1", "420"=>"2", "152"=>"1", "421"=>"2", "610"=>"2", "127"=>"1", "153"=>"1", "422"=>"2", "180"=>"2", "423"=>"2", "612"=>"2", "129"=>"1", "155"=>"1", "181"=>"2", "236"=>"2", "424"=>"2", "450"=>"2", "613"=>"2", "156"=>"1", "182"=>"2", "344"=>"2", "425"=>"2", "614"=>"2", "640"=>"3", "157"=>"1", "183"=>"2", "238"=>"2", "426"=>"2", "452"=>"2", "641"=>"3", "184"=>"2", "346"=>"2", "427"=>"2", "453"=>"2", "185"=>"2", "347"=>"2", "428"=>"2", "454"=>"2", "617"=>"2", "186"=>"2", "429"=>"2", "455"=>"2", "618"=>"2", "644"=>"3", "670"=>"4", "187"=>"2", "456"=>"2", "619"=>"2", "671"=>"4", "188"=>"2", "457"=>"2", "646"=>"3", "672"=>"4", "647"=>"3", "673"=>"4", "674"=>"4", "648"=>"3", "675"=>"4", "649"=>"3", "676"=>"4", "111"=>"1", "677"=>"4", "300"=>"1", "678"=>"4", "301"=>"1", "679"=>"5", "302"=>"1", "140"=>"1"}
  

  def self.description
    "Калькулятор доставки Почтой России"
  end

  def self.register
    super
    ShippingRate.register_calculator(self)
    ShippingMethod.register_calculator(self)
  end

  def compute(line_items=nil)
    order = line_items.last.order
    total_weight = Calculator::RussianPost.get_total_weight(line_items)
    delivery_zone = get_delivery_zone(order.checkout.ship_address.zipcode)
    delivery_zone.nil? ? 0 : get_delivery_price(delivery_zone, total_weight) + get_insurance_fee(order)
  end

  def self.get_total_weight (line_items)
    ((100 + VES_UPAKOVKI)/100)*line_items.map { |li| li.variant.weight.nil? ? VES_TOVARA_PO_UMOLCHANIYU : li.variant.weight}.sum
  end

  private


  def get_delivery_zone (zipcode)
    INDEX_ZONE_HASH[zipcode.to_s[0,3]]
  end

  def get_delivery_price (zone, weight)
    extra_500g_price_count = (weight*2/1000).to_i
    get_ground_price(zone) + extra_500g_price_count*get_extra_500g_price(zone)
  end

  def get_ground_price (zone)
    case zone
    when '1'
      111.20
    when '2'
      112.70
    when '3'
      117.3
    when '4'
      142.6
    when '5'
      161.00
    else
      nil
    end
  end

  def get_extra_500g_price (zone)
    case zone
    when '1'
      8.5
    when '2'
      9.8
    when '3'
      14.4
    when '4'
      20.7
    when '5'
      23.8
    else
      nil
    end
  end

  def get_insurance_fee (order)
    order.item_total * STRAHOVOY_SBOR/100
  end

end 
